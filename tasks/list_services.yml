#
# Gets variables from all web applications recursively (for Homer and SWAG)
#
---
- name: Get a list of containers
  delegate_to: localhost
  become: false
  ansible.builtin.find:
    paths:
      - "roles/containers/frontends"
      - "roles/containers/services"
    file_type: directory
    excludes: "homer"
    recurse: false
  register: containers

- name: Include all default.yml files
  ansible.builtin.include_vars:
    dir: "{{ playbook_dir }}/{{ item.path }}/defaults"
    files_matching: main.yml
    name: "{{ item.path.split('/')[-1] }}"
  with_items: "{{ containers.files }}"
  no_log: true

- name: Empty the variables (In case the task is called twice)
  ansible.builtin.set_fact:
    web_applications: []
    swag_urls: {}
  when: web_applications is defined and swag_urls is defined

- name: Populate the dictionary of all containers
  ansible.builtin.set_fact:
    web_applications: "{{ web_applications | default([]) + [{ 'logo': '/assets/tools/homer-icons/' + item.path.split('/')[-1] + '.png', 'name': lookup('vars', item.path.split('/')[-1])['dashboard_name'] | default(item.path.split('/')[-1] | title), 'url' : lookup('vars', item.path.split('/')[-1])['dashboard_url'] | default(''), 'endpoint': lookup('vars', item.path.split('/')[-1])['health_url'] | default(''), 'category': lookup('vars', item.path.split('/')[-1])['homer_category'] | default ('') }] }}"
  when: lookup('vars', 'enable_' + item.path.split('/')[-1]) | default(False)
  with_items: "{{ containers.files }}"

- name: Populate the URL dictionary with all containers
  ansible.builtin.set_fact:
    swag_urls: "{{ swag_urls | default({}) | combine({ item.path.split('/')[-1] : lookup('vars', item.path.split('/')[-1])['dashboard_url'] | default('') | regex_replace('https?://|/*', '') }) }}"
  when: lookup('vars', 'enable_' + item.path.split('/')[-1]) | default(False)
  with_items: "{{ containers.files }}"
